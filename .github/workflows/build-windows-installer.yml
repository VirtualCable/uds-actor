name: Build UDSActor exe installers
on:
  push:
    branches: [ master, v4.0 ]
  pull_request:
    branches: [ master, v4.0 ]

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: powershell
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r .github/requirements.txt

    - name: Extract version from Python file
      run: |
        $lines = Get-Content src/udsactor/version.py
        foreach ($line in $lines) {
          if ($line -match "VERSION\s*=\s*'([\d\.]+)'") {
            $version = $matches[1]
            break
          }
        }
        if (-not $version) {
          throw "VERSION not found in version.py"
        }
        echo "VERSION=$version" >> $env:GITHUB_ENV

    - name: Install NSIS
      run: |
        choco install nsis -y
        echo "C:\Program Files (x86)\NSIS" >> $env:GITHUB_PATH

    - name: Create PyInstaller Spec File for client
      run: |
        cd src
        pyi-makespec --onefile -F --paths="c:\hostedtoolcache\windows\python\3.10.11\x64\lib\site-packages" --hidden-import=win32crypt --hidden-import=certifi --windowed actor_client.py

    - name: Generate PyInstaller build for client
      run: |
        cd src
        pyinstaller --noconfirm actor_client.spec

    - name: Create PyInstaller Spec File for config
      run: |
        cd src
        pyi-makespec --onefile -F --paths="c:\hostedtoolcache\windows\python\3.10.11\x64\lib\site-packages" --hidden-import=win32crypt --hidden-import=certifi --windowed actor_config.py

    - name: Generate PyInstaller build for config
      run: |
        cd src
        pyinstaller --noconfirm actor_config.spec

    - name: Create PyInstaller Spec File for unmanaged config
      run: |
        cd src
        pyi-makespec --onefile -F --paths="c:\hostedtoolcache\windows\python\3.10.11\x64\lib\site-packages" --hidden-import=win32crypt --hidden-import=certifi --windowed actor_config_unmanaged.py

    - name: Generate PyInstaller build for unmanaged config
      run: |
        cd src
        pyinstaller --noconfirm actor_config_unmanaged.spec

    - name: Create PyInstaller Spec File for service
      run: |
        cd src
        pyi-makespec --onefile -F --paths="c:\hostedtoolcache\windows\python\3.10.11\x64\lib\site-packages" --hidden-import=win32crypt --hidden-import=certifi --windowed actor_service.py

    - name: Generate PyInstaller build for service
      run: |
        cd src
        pyinstaller --noconfirm actor_service.spec

    - name: Patch .nsi with version for managed actor
      run: |
        $nsi = Get-Content .github/actor_managed.nsi
        $nsi = $nsi -replace '!define VERSION .*', "!define VERSION ${{ env.VERSION }}"
        Set-Content src/dist/actor_managed.nsi $nsi

    - name: Build NSIS Installer for managed actor
      run: |
        cd src\dist
        makensis actor_managed.nsi

    - name: Patch .nsi with version for unmanaged actor
      run: |
        $nsi = Get-Content .github/actor_unmanaged.nsi
        $nsi = $nsi -replace '!define VERSION .*', "!define VERSION ${{ env.VERSION }}"
        Set-Content src/dist/actor_unmanaged.nsi $nsi

    - name: Build NSIS Installer for unmanaged actor
      run: |
        cd src\dist
        makensis actor_unmanaged.nsi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: UDSActor-installers-${{ env.VERSION }}-${{ github.sha }}
        path: |
          src\dist\openUDS-Managed_Installer-${{ env.VERSION }}.exe
          src\dist\openUDS-Unmanaged_Installer-${{ env.VERSION }}.exe