// Automatically generated by fl2rust

#![allow(unused_variables)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(dead_code)]
#![allow(clippy::needless_update)]

use fltk::browser::*;
use fltk::button::*;
use fltk::dialog::*;
use fltk::enums::*;
use fltk::frame::*;
use fltk::group::*;
use fltk::image::*;
use fltk::input::*;
use fltk::menu::*;
use fltk::misc::*;
use fltk::output::*;
use fltk::prelude::*;
use fltk::table::*;
use fltk::text::*;
use fltk::tree::*;
use fltk::valuator::*;
use fltk::widget::*;
use fltk::window::*;

#[derive(Debug, Clone)]
pub struct ConfigGui {
    pub win: Window,
    pub choice_ssl_validation: Choice,
    pub input_uds_server: Input,
    pub choice_authenticator: Choice,
    pub input_username: Input,
    pub choice_log_level: Choice,
    pub button_register: Button,
    pub button_test: Button,
    pub button_close: Button,
}

impl ConfigGui {
    pub fn new() -> Self {
	let mut win = Window::new(2366, 1616, 618, 265, None);
	win.set_label(r#"UDS Actor config"#);
	win.set_type(WindowType::Double);
	win.make_resizable(true);
	win.set_frame(FrameType::UpBox);
	win.size_range(524, 332, 0, 0, );
	let mut fl2rust_widget_0 = Group::new(0, 0, 622, 285, None);
	win.resizable(&fl2rust_widget_0);
	fl2rust_widget_0.set_label_type(LabelType::None);
	let mut fl2rust_widget_1 = Flex::new(0, 0, 615, 345, None);
	fl2rust_widget_1.set_type(FlexType::Column);
	fl2rust_widget_1.set_pad(8);
	fl2rust_widget_1.set_margins(0, 12, 0, 0, );
	let mut fl2rust_widget_2 = Flex::new(0, 12, 615, 32, None);
	fl2rust_widget_2.set_type(FlexType::Row);
	fl2rust_widget_2.set_pad(16);
	fl2rust_widget_2.set_margins(16, 4, 16, 4, );
	let mut fl2rust_widget_3 = Frame::new(16, 16, 128, 24, None);
	fl2rust_widget_3.set_label(r#"SSL validation"#);
	let mut choice_ssl_validation = Choice::new(160, 16, 439, 24, None);
	fl2rust_widget_2.resizable(&choice_ssl_validation);
	choice_ssl_validation.set_down_frame(FrameType::BorderBox);
	choice_ssl_validation.set_label_type(LabelType::None);
	choice_ssl_validation.end();
	fl2rust_widget_2.end();
	let mut fl2rust_widget_4 = Flex::new(0, 52, 615, 32, None);
	fl2rust_widget_4.set_type(FlexType::Row);
	fl2rust_widget_4.set_pad(16);
	fl2rust_widget_4.set_margins(16, 4, 16, 4, );
	let mut fl2rust_widget_5 = Frame::new(16, 56, 128, 24, None);
	fl2rust_widget_5.set_label(r#"UDS Server"#);
	let mut input_uds_server = Input::new(160, 56, 439, 24, None);
	fl2rust_widget_4.resizable(&input_uds_server);
	input_uds_server.set_label_type(LabelType::None);
	fl2rust_widget_4.end();
	let mut fl2rust_widget_6 = Flex::new(0, 92, 615, 32, None);
	fl2rust_widget_6.set_type(FlexType::Row);
	fl2rust_widget_6.set_pad(16);
	fl2rust_widget_6.set_margins(16, 4, 16, 4, );
	let mut fl2rust_widget_7 = Frame::new(16, 96, 128, 24, None);
	fl2rust_widget_7.set_label(r#"Service Token"#);
	let mut choice_authenticator = Choice::new(160, 96, 439, 24, None);
	fl2rust_widget_6.resizable(&choice_authenticator);
	choice_authenticator.set_down_frame(FrameType::BorderBox);
	choice_authenticator.set_label_type(LabelType::None);
	choice_authenticator.end();
	fl2rust_widget_6.end();
	let mut fl2rust_widget_8 = Flex::new(0, 132, 615, 32, None);
	fl2rust_widget_8.set_type(FlexType::Row);
	fl2rust_widget_8.set_pad(16);
	fl2rust_widget_8.set_margins(16, 4, 16, 4, );
	let mut fl2rust_widget_9 = Frame::new(16, 136, 128, 24, None);
	fl2rust_widget_9.set_label(r#"Net Restriction"#);
	fl2rust_widget_9.set_tooltip(r#"Restrict valid detection of network interfaces to this network."#);
	let mut input_username = Input::new(160, 136, 439, 24, None);
	input_username.set_label_type(LabelType::None);
	fl2rust_widget_8.end();
	let mut fl2rust_widget_10 = Flex::new(0, 172, 615, 32, None);
	fl2rust_widget_10.set_type(FlexType::Row);
	fl2rust_widget_10.set_pad(16);
	fl2rust_widget_10.set_margins(16, 4, 16, 4, );
	let mut fl2rust_widget_11 = Frame::new(16, 176, 128, 24, None);
	fl2rust_widget_11.set_label(r#"Log Level"#);
	let mut choice_log_level = Choice::new(160, 176, 439, 24, None);
	fl2rust_widget_10.resizable(&choice_log_level);
	choice_log_level.set_down_frame(FrameType::BorderBox);
	choice_log_level.set_label_type(LabelType::None);
	choice_log_level.end();
	fl2rust_widget_10.end();
	fl2rust_widget_2.fixed(&fl2rust_widget_2.child(0).unwrap(), 128);
	fl2rust_widget_2.recalc();
	fl2rust_widget_4.fixed(&fl2rust_widget_4.child(0).unwrap(), 128);
	fl2rust_widget_4.recalc();
	fl2rust_widget_6.fixed(&fl2rust_widget_6.child(0).unwrap(), 128);
	fl2rust_widget_6.recalc();
	fl2rust_widget_8.fixed(&fl2rust_widget_8.child(0).unwrap(), 128);
	fl2rust_widget_8.recalc();
	fl2rust_widget_10.fixed(&fl2rust_widget_10.child(0).unwrap(), 128);
	fl2rust_widget_10.recalc();
	fl2rust_widget_1.end();
	fl2rust_widget_1.fixed(&fl2rust_widget_1.child(0).unwrap(), 32);
	fl2rust_widget_1.fixed(&fl2rust_widget_1.child(1).unwrap(), 32);
	fl2rust_widget_1.fixed(&fl2rust_widget_1.child(2).unwrap(), 32);
	fl2rust_widget_1.fixed(&fl2rust_widget_1.child(3).unwrap(), 32);
	fl2rust_widget_1.fixed(&fl2rust_widget_1.child(4).unwrap(), 32);
	fl2rust_widget_1.recalc();
	fl2rust_widget_0.end();
	let mut fl2rust_widget_12 = Flex::new(0, 215, 618, 53, None);
	fl2rust_widget_12.set_type(FlexType::Row);
	fl2rust_widget_12.set_pad(32);
	fl2rust_widget_12.set_margins(16, 12, 16, 12, );
	let mut button_register = Button::new(16, 227, 174, 29, None);
	button_register.set_label(r#"Register with UDS"#);
	let mut button_test = Button::new(222, 227, 174, 29, None);
	button_test.set_label(r#"Test configuration"#);
	let mut button_close = Button::new(428, 227, 174, 29, None);
	button_close.set_label(r#"Close"#);
	fl2rust_widget_12.end();
	win.end();
	win.show();
	Self {
	    win,
	    choice_ssl_validation,
	    input_uds_server,
	    choice_authenticator,
	    input_username,
	    choice_log_level,
	    button_register,
	    button_test,
	    button_close,
	}
    }
}



